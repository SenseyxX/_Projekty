// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Warehouse.Infrastructure.Persistence.Context;

namespace Warehouse.Infrastructure.Migrations
{
    [DbContext(typeof(WarehouseContext))]
    [Migration("20231117165131_InitialDataSeedMigration")]
    partial class InitialDataSeedMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Warehouse.Domain.Category.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Name");

                    b.Property<byte>("State")
                        .HasColumnType("tinyint")
                        .HasColumnName("State");

                    b.HasKey("Id");

                    b.ToTable("Category", "Warehouse");
                });

            modelBuilder.Entity("Warehouse.Domain.Item.Entities.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActualOwnerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ActualOwnerId");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OwnerId");

                    b.Property<byte>("QualityLevel")
                        .HasColumnType("tinyint")
                        .HasColumnName("QualityLevel");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.Property<byte>("State")
                        .HasColumnType("tinyint")
                        .HasColumnName("State");

                    b.HasKey("Id");

                    b.HasIndex("ActualOwnerId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Items", "Warehouse");
                });

            modelBuilder.Entity("Warehouse.Domain.Item.Entities.LoanHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BorrowerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BorrowerId");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ItemId");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ReceiverId");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("LoanHistories", "Warehouse");
                });

            modelBuilder.Entity("Warehouse.Domain.Rental.Entities.Rental", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("RentalStatus")
                        .HasColumnType("int")
                        .HasColumnName("RentalStatus");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.ToTable("Rental", "Warehouse");
                });

            modelBuilder.Entity("Warehouse.Domain.Rental.Entities.RentalItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RentalItemCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RentalItemCode");

                    b.Property<int>("RentalItemStatus")
                        .HasColumnType("int")
                        .HasColumnName("RentalItemStatus");

                    b.HasKey("Id");

                    b.ToTable("RentalItems", "Warehouse");
                });

            modelBuilder.Entity("Warehouse.Domain.Squad.Entities.Squad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Name");

                    b.Property<Guid?>("SquadOwnerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SquadOwnerId");

                    b.Property<byte>("State")
                        .HasColumnType("tinyint")
                        .HasColumnName("State");

                    b.HasKey("Id");

                    b.ToTable("Squads", "Warehouse");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a0e19f9-8e92-41a1-9e92-09c587caef05"),
                            Name = "Drużyna Oskara",
                            SquadOwnerId = new Guid("eab0a7ad-8542-4e1a-8dd3-a8391edbf5f4"),
                            State = (byte)0
                        },
                        new
                        {
                            Id = new Guid("6251c1dc-58b9-43fa-bf01-098037d53bb6"),
                            Name = "Drużyna Szymka",
                            SquadOwnerId = new Guid("fa797f3e-b77a-4b92-a7e3-5aeba9aa4675"),
                            State = (byte)0
                        },
                        new
                        {
                            Id = new Guid("c7d09645-cf24-4aca-93c1-96e8c97e4286"),
                            Name = "Drużyna Olka",
                            SquadOwnerId = new Guid("321a719b-b778-485f-8432-11f0f038cbce"),
                            State = (byte)0
                        });
                });

            modelBuilder.Entity("Warehouse.Domain.Squad.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Name");

                    b.Property<byte>("Points")
                        .HasColumnType("tinyint")
                        .HasColumnName("Points");

                    b.Property<Guid>("SquadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<Guid>("TeamOwnerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TeamOwnerId");

                    b.HasKey("Id");

                    b.HasIndex("SquadId");

                    b.ToTable("Teams", "Warehouse");

                    b.HasData(
                        new
                        {
                            Id = new Guid("296f60db-9f13-48f3-853f-343de5ebdd20"),
                            Description = "Opis zastępu Oskara",
                            Name = "Zastęp Oskara",
                            Points = (byte)1,
                            SquadId = new Guid("1a0e19f9-8e92-41a1-9e92-09c587caef05"),
                            State = 0,
                            TeamOwnerId = new Guid("eab0a7ad-8542-4e1a-8dd3-a8391edbf5f4")
                        },
                        new
                        {
                            Id = new Guid("f7921a66-83b4-451d-8556-893882233118"),
                            Description = "Opis zastępu Szymka",
                            Name = "Zastęp Szymka",
                            Points = (byte)1,
                            SquadId = new Guid("6251c1dc-58b9-43fa-bf01-098037d53bb6"),
                            State = 0,
                            TeamOwnerId = new Guid("fa797f3e-b77a-4b92-a7e3-5aeba9aa4675")
                        },
                        new
                        {
                            Id = new Guid("d1401039-21d8-4a83-97e1-67dd2201e4a1"),
                            Description = "Opis zastępu Olka",
                            Name = "Zastęp Olka",
                            Points = (byte)1,
                            SquadId = new Guid("c7d09645-cf24-4aca-93c1-96e8c97e4286"),
                            State = 0,
                            TeamOwnerId = new Guid("321a719b-b778-485f-8432-11f0f038cbce")
                        });
                });

            modelBuilder.Entity("Warehouse.Domain.User.Entities.Due", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("Amount");

                    b.Property<byte>("DueStatus")
                        .HasColumnType("tinyint")
                        .HasColumnName("DueStatus");

                    b.Property<byte>("Half")
                        .HasColumnType("tinyint")
                        .HasColumnName("Half");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Dues", "Warehouse");
                });

            modelBuilder.Entity("Warehouse.Domain.User.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Email");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("LastName");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Name");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varbinary(256)")
                        .HasColumnName("PasswordHash");

                    b.Property<byte>("PermissionLevel")
                        .HasColumnType("tinyint")
                        .HasColumnName("PermissionLevel");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("PhoneNumber");

                    b.Property<Guid?>("SquadId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SquadId");

                    b.Property<byte>("State")
                        .HasColumnType("tinyint")
                        .HasColumnName("State");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("SquadId");

                    b.HasIndex("TeamId");

                    b.ToTable("Users", "Warehouse");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eab0a7ad-8542-4e1a-8dd3-a8391edbf5f4"),
                            Email = "ogacki",
                            LastName = "Gacki",
                            Name = "Oskar",
                            PasswordHash = new byte[] { 68, 249, 238, 1, 181, 104, 102, 91, 134, 226, 253, 16, 26, 55, 105, 89, 250, 56, 154, 177, 202, 39, 221, 156, 116, 142, 202, 202, 29, 179, 124, 94, 242, 0, 190, 209, 190, 147, 126, 253, 192, 28, 69, 125, 101, 197, 170, 130, 2, 17, 59, 75, 117, 94, 108, 243, 111, 38, 181, 189, 34, 169, 222, 90, 179, 114, 204, 223, 164, 187, 4, 159, 48, 113, 80, 98, 67, 245, 223, 21, 231, 28, 35, 226, 187, 85, 103, 177, 236, 21, 197, 99, 71, 152, 217, 187, 73, 67, 233, 114, 179, 244, 76, 143, 168, 59, 62, 232, 92, 44, 110, 136, 45, 55, 222, 93, 165, 45, 188, 51, 216, 9, 144, 102, 128, 173, 14, 64 },
                            PermissionLevel = (byte)0,
                            PhoneNumber = "888888888",
                            SquadId = new Guid("1a0e19f9-8e92-41a1-9e92-09c587caef05"),
                            State = (byte)0,
                            TeamId = new Guid("296f60db-9f13-48f3-853f-343de5ebdd20")
                        },
                        new
                        {
                            Id = new Guid("fa797f3e-b77a-4b92-a7e3-5aeba9aa4675"),
                            Email = "skatryniok",
                            LastName = "Katryniok",
                            Name = "Szymon",
                            PasswordHash = new byte[] { 191, 241, 96, 125, 56, 97, 233, 246, 197, 216, 233, 108, 42, 120, 122, 50, 77, 174, 44, 208, 110, 8, 67, 205, 183, 246, 150, 74, 61, 106, 243, 87, 217, 28, 43, 87, 229, 85, 53, 163, 25, 113, 36, 184, 171, 92, 117, 93, 147, 84, 100, 220, 167, 2, 150, 198, 180, 229, 119, 41, 33, 219, 70, 124, 215, 71, 130, 36, 220, 43, 56, 179, 207, 1, 182, 128, 75, 166, 83, 81, 65, 131, 134, 247, 236, 9, 158, 20, 169, 25, 245, 218, 24, 68, 19, 104, 84, 125, 6, 39, 170, 72, 166, 15, 61, 143, 128, 110, 206, 174, 5, 233, 221, 1, 196, 155, 239, 146, 127, 197, 115, 67, 185, 242, 230, 29, 142, 177 },
                            PermissionLevel = (byte)0,
                            PhoneNumber = "999999999",
                            SquadId = new Guid("6251c1dc-58b9-43fa-bf01-098037d53bb6"),
                            State = (byte)0,
                            TeamId = new Guid("f7921a66-83b4-451d-8556-893882233118")
                        },
                        new
                        {
                            Id = new Guid("321a719b-b778-485f-8432-11f0f038cbce"),
                            Email = "akijowski",
                            LastName = "Kijowski",
                            Name = "Aleksander",
                            PasswordHash = new byte[] { 235, 166, 147, 103, 147, 151, 125, 46, 69, 126, 64, 158, 10, 107, 134, 177, 208, 2, 98, 14, 135, 64, 142, 93, 74, 153, 91, 48, 186, 155, 78, 31, 29, 166, 6, 225, 25, 149, 173, 205, 11, 250, 219, 82, 163, 165, 180, 234, 194, 166, 172, 42, 214, 101, 113, 134, 100, 3, 203, 19, 72, 148, 163, 84, 146, 182, 38, 142, 121, 237, 11, 220, 253, 211, 179, 150, 239, 2, 47, 210, 168, 67, 110, 207, 45, 209, 227, 186, 176, 217, 234, 55, 211, 237, 115, 166, 46, 245, 99, 210, 33, 23, 48, 11, 193, 242, 95, 198, 129, 116, 46, 191, 186, 159, 5, 1, 172, 128, 9, 30, 237, 45, 60, 221, 37, 196, 41, 176 },
                            PermissionLevel = (byte)0,
                            PhoneNumber = "777777777",
                            SquadId = new Guid("c7d09645-cf24-4aca-93c1-96e8c97e4286"),
                            State = (byte)0,
                            TeamId = new Guid("d1401039-21d8-4a83-97e1-67dd2201e4a1")
                        },
                        new
                        {
                            Id = new Guid("071c18c6-93e1-40ef-ae43-bdb3c8f2aab6"),
                            Email = "akijowski",
                            LastName = "Patoń",
                            Name = "Wojtek",
                            PasswordHash = new byte[] { 172, 176, 251, 90, 203, 48, 72, 183, 112, 175, 85, 250, 142, 169, 61, 166, 123, 95, 136, 235, 94, 146, 145, 167, 36, 25, 232, 130, 65, 52, 136, 217, 152, 52, 139, 249, 218, 12, 14, 1, 200, 47, 41, 109, 173, 91, 216, 33, 54, 41, 121, 46, 2, 164, 152, 164, 45, 191, 97, 57, 233, 6, 94, 248, 166, 223, 157, 150, 252, 108, 86, 84, 0, 164, 86, 23, 234, 238, 170, 185, 66, 153, 30, 165, 9, 142, 232, 140, 161, 120, 255, 104, 59, 223, 248, 34, 124, 54, 87, 169, 239, 197, 250, 8, 3, 20, 72, 39, 25, 155, 198, 66, 67, 49, 220, 236, 187, 206, 78, 12, 107, 193, 190, 94, 88, 1, 230, 30 },
                            PermissionLevel = (byte)0,
                            PhoneNumber = "666666666",
                            SquadId = new Guid("1a0e19f9-8e92-41a1-9e92-09c587caef05"),
                            State = (byte)0,
                            TeamId = new Guid("296f60db-9f13-48f3-853f-343de5ebdd20")
                        });
                });

            modelBuilder.Entity("Warehouse.Domain.Item.Entities.Item", b =>
                {
                    b.HasOne("Warehouse.Domain.User.Entities.User", null)
                        .WithMany("OwnedItems")
                        .HasForeignKey("ActualOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Domain.Category.Entities.Category", null)
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Domain.User.Entities.User", null)
                        .WithMany("StoredItems")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Warehouse.Domain.Item.Entities.LoanHistory", b =>
                {
                    b.HasOne("Warehouse.Domain.Item.Entities.Item", null)
                        .WithMany("LoanHistories")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Warehouse.Domain.Rental.Entities.RentalItem", b =>
                {
                    b.HasOne("Warehouse.Domain.Rental.Entities.Rental", null)
                        .WithMany("RentalItems")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Warehouse.Domain.Squad.Entities.Team", b =>
                {
                    b.HasOne("Warehouse.Domain.Squad.Entities.Squad", null)
                        .WithMany("Teams")
                        .HasForeignKey("SquadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Warehouse.Domain.User.Entities.Due", b =>
                {
                    b.HasOne("Warehouse.Domain.User.Entities.User", null)
                        .WithMany("Dues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Warehouse.Domain.User.Entities.User", b =>
                {
                    b.HasOne("Warehouse.Domain.Squad.Entities.Squad", null)
                        .WithMany("Users")
                        .HasForeignKey("SquadId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Warehouse.Domain.Squad.Entities.Team", null)
                        .WithMany("Users")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("Warehouse.Domain.Category.Entities.Category", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Warehouse.Domain.Item.Entities.Item", b =>
                {
                    b.Navigation("LoanHistories");
                });

            modelBuilder.Entity("Warehouse.Domain.Rental.Entities.Rental", b =>
                {
                    b.Navigation("RentalItems");
                });

            modelBuilder.Entity("Warehouse.Domain.Squad.Entities.Squad", b =>
                {
                    b.Navigation("Teams");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Warehouse.Domain.Squad.Entities.Team", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Warehouse.Domain.User.Entities.User", b =>
                {
                    b.Navigation("Dues");

                    b.Navigation("OwnedItems");

                    b.Navigation("StoredItems");
                });
#pragma warning restore 612, 618
        }
    }
}
