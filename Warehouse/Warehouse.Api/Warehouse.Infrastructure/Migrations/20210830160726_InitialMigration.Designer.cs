// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Warehouse.Infrastructure.Persistence.Context;

namespace Warehouse.Infrastructure.Migrations
{
    [DbContext(typeof(WarehouseContext))]
    [Migration("20210830160726_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Warehouse.Domain.Category.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("CategoryState")
                        .HasColumnType("tinyint")
                        .HasColumnName("CategoryState");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Category", "Warehouse");
                });

            modelBuilder.Entity("Warehouse.Domain.Item.Entities.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActualOwnerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ActualOwnerId");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("CategoryState")
                        .HasColumnType("tinyint")
                        .HasColumnName("CategoryState");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OwnerId");

                    b.Property<byte>("QualityLevel")
                        .HasColumnType("tinyint")
                        .HasColumnName("QualityLevel");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("ActualOwnerId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Items", "Warehouse");
                });

            modelBuilder.Entity("Warehouse.Domain.Item.Entities.LoanHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BorrowerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BorrowerId");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ItemId");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ReceiverId");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("LoanHistories", "Warehouse");
                });

            modelBuilder.Entity("Warehouse.Domain.Squad.Entities.Squad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("CategoryState")
                        .HasColumnType("tinyint")
                        .HasColumnName("CategoryState");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Squads", "Warehouse");
                });

            modelBuilder.Entity("Warehouse.Domain.Squad.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryState")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Name");

                    b.Property<byte>("Points")
                        .HasColumnType("tinyint")
                        .HasColumnName("Points");

                    b.Property<Guid>("TeamOwnerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TeamOwnerId");

                    b.HasKey("Id");

                    b.ToTable("Teams", "Warehouse");
                });

            modelBuilder.Entity("Warehouse.Domain.User.Entities.Due", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("Amount");

                    b.Property<byte>("DueStatus")
                        .HasColumnType("tinyint")
                        .HasColumnName("DueStatus");

                    b.Property<byte>("Half")
                        .HasColumnType("tinyint")
                        .HasColumnName("Half");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Dues", "Warehouse");
                });

            modelBuilder.Entity("Warehouse.Domain.User.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("CategoryState")
                        .HasColumnType("tinyint")
                        .HasColumnName("CategoryState");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Email");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("LastName");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Name");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varbinary(256)")
                        .HasColumnName("PasswordHash");

                    b.Property<byte>("PermissionLevel")
                        .HasColumnType("tinyint")
                        .HasColumnName("PermissionLevel");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("PhoneNumber");

                    b.Property<Guid>("SquadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SquadId");

                    b.HasIndex("TeamId");

                    b.ToTable("Users", "Warehouse");
                });

            modelBuilder.Entity("Warehouse.Domain.Item.Entities.Item", b =>
                {
                    b.HasOne("Warehouse.Domain.User.Entities.User", null)
                        .WithMany("OwnedItems")
                        .HasForeignKey("ActualOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Domain.Category.Entities.Category", null)
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Domain.User.Entities.User", null)
                        .WithMany("StoredItems")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("Warehouse.Domain.Item.Entities.LoanHistory", b =>
                {
                    b.HasOne("Warehouse.Domain.Item.Entities.Item", null)
                        .WithMany("LoanHistories")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Warehouse.Domain.User.Entities.Due", b =>
                {
                    b.HasOne("Warehouse.Domain.User.Entities.User", null)
                        .WithMany("Dues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Warehouse.Domain.User.Entities.User", b =>
                {
                    b.HasOne("Warehouse.Domain.Squad.Entities.Squad", null)
                        .WithMany("Users")
                        .HasForeignKey("SquadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Domain.Squad.Entities.Team", null)
                        .WithMany("Users")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Warehouse.Domain.Category.Entities.Category", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Warehouse.Domain.Item.Entities.Item", b =>
                {
                    b.Navigation("LoanHistories");
                });

            modelBuilder.Entity("Warehouse.Domain.Squad.Entities.Squad", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Warehouse.Domain.Squad.Entities.Team", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Warehouse.Domain.User.Entities.User", b =>
                {
                    b.Navigation("Dues");

                    b.Navigation("OwnedItems");

                    b.Navigation("StoredItems");
                });
#pragma warning restore 612, 618
        }
    }
}
